colnames(tempo)[2] <-  "importance"
tempo[,1] <- gsub("YES$","",tempo[,1],ignore.case = TRUE)
tempo[,1] <- gsub("NO$","",tempo[,1],ignore.case = TRUE)
tempo[,2] <- (tempo[,2]-mean(tempo[,2]))/sqrt(var(tempo[,2])) # on centre réduit
tempo <- arrange(tempo, desc(importance))[1:k,]
colnames(tempo)[2] <-  paste("imp",mot,sep = "_")
tempo$rank <- seq(1:k)
colnames(tempo)[3] <- paste("rang",mot,sep = "_")
return(tempo)
}
# 1)Importance variable pour le modele logistique
mod_log <- glm(Y~.,data=don,family="binomial")
varimplog <- variable_imp(x=mod_log,t=1,mot="log")
# 2)Importance variable pour le modele ridge
tmp <- cv.glmnet(XX,YY,alpha=0,family="binomial")
mod_ridge  <- glmnet(XX,YY,alpha=0,lambda=tmp$lambda.min, family="binomial")
varimpridge <- variable_imp(x=mod_ridge$beta,t=2,mot="ridge")
# 3)Importance variable pour le modele lasso (colnames(XX)[mod_lasso$beta@i])
tmp <- cv.glmnet(XX,YY, alpha=1, family="binomial")
mod_lasso <- glmnet(XX,YY,alpha=1, lambda =tmp$lambda.1se,family="binomial" )
varimplasso <- variable_imp(x=mod_lasso$beta,t=2, mot="lasso")
# 4)Importance variable pour le modele elastic
tmp <- cv.glmnet(XX,YY, alpha=0.5, family="binomial")
mod_elastic <- glmnet(XX,YY,alpha = 0.5, lambda = tmp$lambda.min, family="binomial")
varimpelastic <- variable_imp(mod_elastic$beta,t=2,mot = "elastic")
# 5)Importance variable pour le modele Foret
mod_foret <- randomForest(Y~., data = don, ntree=500)
varimpforet <- variable_imp(mod_foret,t=1,mot="foret")
# 6)Importance variable pour le modele adaboost
tmp <- gbm(as.numeric(Y)-1~.,data = don, distribution = "adaboost", interaction.depth = 2,
shrinkage = 0.1,n.trees = 500)
M <- gbm.perf(tmp)[1]
mod_adaboost <- gbm(as.numeric(Y)-1~.,data = don, distribution = "adaboost", interaction.depth = 2,
shrinkage = 0.1,n.trees = M)
varimpada <- variable_imp(summary(mod_adaboost),t=3, mot="adaboost")
# 7)Importance variable pour le modele logiboost
tmp <- gbm(as.numeric(Y)-1~.,data=don, distribution="bernoulli", interaction.depth = 2,
shrinkage=0.1,n.trees=500)
M <- gbm.perf(tmp)[1]
mod_logiboost <- gbm(as.numeric(Y)-1~.,data=don, distribution="bernoulli", interaction.depth = 2,
shrinkage=0.1,n.trees=M)
varimplogibo <- variable_imp(summary(mod_logiboost),t=3,mot="logiboost")
# ?)Importance variable pour le modele SVM (je ne sais pas appliquer la feature selection)
#mod_svm <- svm(Y~.,data=don, kernel="linear",probability=T)
#tmp <- tune(svm,Y~.,data=don, kernel="linear",probability=T,range=list(cost=c(0.1,1,10)))
#mod <- tmp$best.model
# Croisement des tables d'importance des variables
choix_var <- varimplog %>%
full_join(varimpridge) %>%
full_join(varimplasso) %>%
full_join(varimpelastic) %>%
full_join(varimpforet) %>%
full_join(varimpada) %>%
full_join(varimplogibo)
choix_var <- cbind(choix_var[,1],choix_var[,c(which(grepl("^imp",names(choix_var))))])
choix_var <- as.data.frame(choix_var)
names(choix_var)[1] <- "variable"
write.csv2(choix_var,"data/choix_var.csv",row.names = FALSE)
choix_var
# Chargement du jeu de donnée
don <- read.csv("data/nhanes_hyper_mice.csv", row.names = 1)
summary(don)
donb <- don[,c(which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm"),"Gender","Age_in_years_at_screening")]
donb <- don[,c(which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm"),"Gender","Age_in_years_at_screening")]
which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm")
c(which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm"),"Gender","Age_in_years_at_screening")
don[,"Gender"]
don[,c("Gender",5)]
don[,c(2,5)]
donb <- don[,c(which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm"),1,2)]
donb
donb <- don[,c(1,2,which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm"))]
acp <- PCA(donb,scale.unit=T,graph = F,quanti.sup = 2, quali.sup = 1)
# ACP
library(FactoMineR)
acp <- PCA(donb,scale.unit=T,graph = F,quanti.sup = 2, quali.sup = 1)
plot(acp, choix = "ind", cex=0.5)
plot(acp, choix = "var", cex=0.5)
dim(don)
donb <- don[,c(88,2,which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm"))]
acp <- PCA(donb,scale.unit=T,graph = F,quanti.sup = 2, quali.sup = 1)
plot(acp, choix = "var", cex=0.5)
plot(acp, choix = "ind", cex=0.5)
var <- get_pca_var(acp)
fviz_pca_var(acp, col.var = "cos2", gradient.cols = c("black", "Blue", "red"),
repel = TRUE ,alpha.var="cos2")
library(factoextra)
get_eigenvalue(acp)
fviz_eig(acp,addlabels = T)
var <- get_pca_var(acp)
fviz_pca_var(acp, col.var = "cos2", gradient.cols = c("black", "Blue", "red"),
repel = TRUE ,alpha.var="cos2")
var
for (i in 1:15){
kmk <- kmeans(var$coord,centers = i, nstart = 10)
partition[i]= kmk$tot.withinss/kmk$totss*100
}
partition <- 1:15
for (i in 1:15){
kmk <- kmeans(var$coord,centers = i, nstart = 10)
partition[i]= kmk$tot.withinss/kmk$totss*100
}
plot(partition, type="h")
km <- kmeans(var$coord, center=4, nstart = 25)
grp <- as.factor(km$cluster)
fviz_pca_var(acp, col.var = grp, palette = c("black", "Blue", "red", "orange"),
repel = TRUE ,alpha.var="cos2")
pca(var$coord)
?hclust
hclust(var$coord)
hclust(var$coord, method = "card.D2")
hclust(var$coord, method = "ward.D2")
var$coord
summary(var$coord)
hclust(dist(var$coord), method = "ward.D2")
hclust(dist(var$coord), method = "ward.D2")
cah <- hclust(dist(var$coord), method = "ward.D2")
plot(as.dendrogram(cah))
cutree(cah, h=1.5)
cutree(cah, h=2)
donb <- don[,which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm")]
# On applique l'ACP avec le critère de distance Ward
cah <- hclust(dist(scale(donb)),method = "ward.D2")
plot(as.dendrogram(cah))
rect.hclust(cah,h=120)
cutree(cah, h=120)
cah <- hclust(dist(var$coord), method = "ward.D2")
plot(as.dendrogram(cah))
cutree(cah, h=1.3)
cutree(cah, h=1.3)==1
cutree(cah, h=1.3)
toto <- cutree(cah, h=1.3)
toto
toto <- as.data.frame(toto)
toto
toto <- cbind(row.names(toto, toto[,1]))
toto <- cbind(row.names(toto), toto[,1])
toto
toto <- as.data.frame(cbind(row.names(toto), toto[,1]))
toto
cbind(row.names(toto), toto[,1])
toto <- cutree(cah, h=1.3)
toto <- cutree(cah, h=1.3)
toto
as.data.frame(cbind(row.names(toto), toto[,1]))
cbind(row.names(toto), toto[,1])
toto <- cbind(row.names(toto), toto[,1]))
toto <- cbind(row.names(toto), toto[,1])
toto <- cutree(cah, h=1.3)
toto <- cbind(row.names(toto), toto)
toto
toto <- cbind(row.names(toto), toto)
toto
row.names(toto) <- NULL
toto
as.data.frame(toto)
toto <- as.data.frame(toto)
toto(toto==1,)
toto[toto==1,]
toto["toto"==1,]
toto[which(toto$toto==1,),]
toto[which(toto$toto==2,),]
var$coord
acp <- PCA(donb,scale.unit=T,graph = F,quanti.sup = 2, quali.sup = 1)
acp$var
km <- kmeans(var$coord, center=4, nstart = 25)
grp <- as.factor(km$cluster)
plot(as.dendrogram(cah))
toto <- cutree(cah, h=1.3)
toto <- cbind(row.names(toto), toto)
row.names(toto) <- NULL
toto <- as.data.frame(toto)
# classification sur les nutriments
rm(list = ls())
# Classification nutriments
donb <- don[,which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm")
donb <- don[,which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm")]
# Classification nutriments
don <- read.csv("data/nhanes_hyper_mice.csv", row.names = 1)
# Classification nutriments
don <- read.csv("data/nhanes_hyper_mice.csv", row.names = 1)
# Classification nutriments
don <- read.csv("data/nhanes_hyper_mice.csv", row.names = 1)
donb <- don[,which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm")]
acp <- PCA(donb,scale.unit=T,graph = F)
# Classification nutriments
library(FactoMineR)
acp <- PCA(donb,scale.unit=T,graph = F)
library(factoextra)
barplot(acp$eig[,2])
acp$eig
acp$var
partition <- 1:15
for (i in 1:15){
kmk <- kmeans(var$coord,centers = i, nstart = 10)
partition[i]= kmk$tot.withinss/kmk$totss*100
}
var <- acp$var
partition <- 1:15
for (i in 1:15){
kmk <- kmeans(var$coord,centers = i, nstart = 10)
partition[i]= kmk$tot.withinss/kmk$totss*100
}
partition
plot(partition)
plot(partition, type=h)
plot(partition, type="h")
km <- kmeans(var$coord, center=5, nstart = 25)
km
km$cluster
table(km$cluster)
cbind(row.names(km$cluster),km$cluster)
as.data.frame(cbind(row.names(km$cluster),km$cluster),row.names = FALSE)
row.names(km$cluster)
km <- kmeans(var$coord, center=5, nstart = 25)
km$cluster
row.names(km$cluster)
row.name(km$cluster)
row.names(km$cluster)
km <- kmeans(var$coord, center=5, nstart = 25)
tempo <- cbind(row.names(km$cluster),km$cluster)
tempo
dim(tempo)
class(tempo)
class(km$cluster)
as.data.frame(tempo)
tempo <- as.data.frame(cbind(row.names(km$cluster),km$cluster))
colnames(tempo) <- c("nutriment","classe")
colnames(tempo)
as.data.frame(km$cluster)
cbind(row.names(tempo),tempo)
tempo <- cbind(row.names(tempo),tempo)
row.names(tempo) <- NULL
tempo
colnames(tempo) <- c("nutriment","classe")
table(tempo)
temp[which(tempo$classe==1),]
tempo[which(tempo$classe==1),]
tempo[which(tempo$classe==1),]
tempo[which(tempo$classe==2),]
tempo[which(tempo$classe==3),]
tempo[which(tempo$classe==4),]
tempo[which(tempo$classe==5),]
cah <- hclust(dist(scale(donb)),method = "ward.D2")
plot(as.dendrogram(cah))
don <- read.csv("data/nhanes_hyper_mice.csv", row.names = 1)
donb <- don[,which(colnames(don)=="Energy_kcal"):which(colnames(don)=="Moisture_gm")]
cah <- hclust(dist(scale(donb)),method = "ward.D2")
cah <- hclust(dist(scale(var$coord)),method = "ward.D2")
plot(as.dendrogram(cah))
rect.hclust(cah,h=5)
cutree(cah, h=7)
km <- kmeans(var$coord, center=7, nstart = 25)
tempo <- as.data.frame(km$cluster)
tempo <- cbind(row.names(tempo),tempo)
row.names(tempo) <- NULL
colnames(tempo) <- c("nutriment","classe")
tempo[which(tempo$classe==1),]
tempo[which(tempo$classe==2),]
tempo[which(tempo$classe==3),]
tempo[which(tempo$classe==4),]
tempo[which(tempo$classe==5),]
tempo[which(tempo$classe==6),]
tempo[which(tempo$classe==7),]
tempo2 <- cutree(cah, h=7)
tempo2
class(tempo2)
tempo2 <- cutree(cah, h=7)
tempo2 <- as.data.frame(km$cluster)
tempo2 <- cbind(row.names(tempo2),tempo2)
row.names(tempo2) <- NULL
colnames(tempo2) <- c("nutriment","classe")
tempo2[which(tempo2$classe==1),]
tempo2[which(tempo2$classe==2),]
tempo2[which(tempo2$classe==3),]
tempo2[which(tempo2$classe==4),]
tempo2[which(tempo2$classe==5),]
tempo2[which(tempo2$classe==6),]
tempo2[which(tempo2$classe==7),]
cah <- hclust(dist(scale(var$coord)),method = "ward.D2")
plot(as.dendrogram(cah))
rect.hclust(cah,h=5)
tempo2 <- cutree(cah, h=6)
tempo2 <- as.data.frame(km$cluster)
tempo2 <- cbind(row.names(tempo2),tempo2)
row.names(tempo2) <- NULL
colnames(tempo2) <- c("nutriment","classe")
tempo2[which(tempo2$classe==1),]
tempo2[which(tempo2$classe==2),]
tempo2[which(tempo2$classe==3),]
tempo2[which(tempo2$classe==4),]
tempo2[which(tempo2$classe==5),]
tempo2[which(tempo2$classe==6),]
cah <- hclust(dist(scale(var$coord)),method = "ward.D2")
plot(as.dendrogram(cah))
rect.hclust(cah,h=6)
tempo2 <- cutree(cah, h=6)
tempo2 <- as.data.frame(km$cluster)
tempo2 <- cbind(row.names(tempo2),tempo2)
row.names(tempo2) <- NULL
colnames(tempo2) <- c("nutriment","classe")
tempo2[which(tempo2$classe==1),]
tempo2[which(tempo2$classe==2),]
tempo2[which(tempo2$classe==3),]
tempo2[which(tempo2$classe==4),]
tempo2[which(tempo2$classe==5),]
tempo2[which(tempo2$classe==6),]
rm(list=ls())
library(mice)
library(VIM)
library(data.table)
# Chargement du fichier transcodifié, enlevement de la 1ere colonne X et renommer la variable de sortie en Y
nhanes_hyper <- read.csv("data/nhanes_hyper_transcodifie.csv")
nhanes_hyper$X <- NULL
names(nhanes_hyper)[ncol(nhanes_hyper)] <- "Y"
nhanes_hyper$Y <- as.factor(nhanes_hyper$Y)
levels(nhanes_hyper$Y) <- c("Yes","No",NA)
# on remet les noms des champs propre
names(nhanes_hyper) <- gsub("\\.\\.?\\.?","_",names(nhanes_hyper))
names(nhanes_hyper) <- gsub("_$","", names(nhanes_hyper))
names(nhanes_hyper)[89] <- "Total_plain_water_drank_yesterday"
names(nhanes_hyper)[57] <- paste0("alpha_",names(nhanes_hyper)[57])
names(nhanes_hyper)[58] <- paste0("beta_",names(nhanes_hyper)[58])
names(nhanes_hyper)[58] <- sub("_1$","",names(nhanes_hyper)[58])
# pour les codes qui ont et des soucis de transcodification, transco manuel
levels(nhanes_hyper$Ever_told_you_have_Hepatitis_B) <- c("Yes","No","Refused","Don't know")
levels(nhanes_hyper$Ever_told_you_have_Hepatitis_C) <- c("Yes","No","Don't know")
levels(nhanes_hyper$Received_Hepatitis_A_vaccine) <- c("At least 2 doses","Less than 2 doses",
"No doses","Refused", "Don't know")
levels(nhanes_hyper$Received_Hepatitis_B_3_dose_series) <- c("At least 2 doses","Less than 2 doses",
"No doses","Refused", "Don't know")
levels(nhanes_hyper$Ever_been_told_you_have_asthma) <- c("Yes", "No", "Don't know")
levels(nhanes_hyper$X_of_people_who_live_here_smoke_tobacco) <- c("No one in houseold is a smoker",
"1 household member is a smoker",
"2 household members are smokers",
"3 or more household members are smokers",
"Refused",NA)
levels(nhanes_hyper$Doctor_ever_said_you_were_overweight) <- c("Yes","No","Don't know")
levels(nhanes_hyper$Home_owned_bought_rented_other)[2] <- NA
levels(nhanes_hyper$Overall_recommendation_for_care)[2] <- NA
levels(nhanes_hyper$Overall_recommendation_for_care)[3] <- NA
levels(nhanes_hyper$VAR_TRAVAIL) <- c("No","Yes")
#Alleger un peu la description
levels(nhanes_hyper$Total_number_of_people_in_the_Household)[7] <- "7 or more"
levels(nhanes_hyper$Total_number_of_people_in_the_Family)[7] <- "7 or more"
#Qlqs nettoyage des variables non utile
nhanes_hyper$fed_infant_either_day <- NULL
nhanes_hyper$Number_of_days_of_intake <- NULL
nhanes_hyper$SEQN <- NULL
for (i in 1:ncol(nhanes_hyper)){
if (class(nhanes_hyper[,i])=="factor"){
for (j in 1:length(levels(nhanes_hyper[,i]))){
if (levels(nhanes_hyper[,i])[j]=="Don't know"){
levels(nhanes_hyper[,i])[j]=NA
break
}
}
}
}
for (i in 1:ncol(nhanes_hyper)){
if (class(nhanes_hyper[,i])=="factor"){
for (j in 1:length(levels(nhanes_hyper[,i]))){
if (levels(nhanes_hyper[,i])[j]=="Refused"){
levels(nhanes_hyper[,i])[j]=NA
break
}
}
}
}
# Etude du jeu de donnée nhanes_hyper
don <- nhanes_hyper
md.pattern(don)
aggr_plot <- aggr(don, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=.7, gap=3,
ylab=c("Histogram of missing data","Pattern"))
don$Received_Hepatitis_A_vaccine <- NULL
don$Received_Hepatitis_B_3_dose_series <- NULL
rm(list=ls())
library(mice)
library(VIM)
library(data.table)
# Chargement du fichier transcodifié, enlevement de la 1ere colonne X et renommer la variable de sortie en Y
nhanes_hyper <- read.csv("data/nhanes_hyper_transcodifie.csv")
nhanes_hyper$X <- NULL
names(nhanes_hyper)[ncol(nhanes_hyper)] <- "Y"
nhanes_hyper$Y <- as.factor(nhanes_hyper$Y)
levels(nhanes_hyper$Y) <- c("Yes","No",NA)
# on remet les noms des champs propre
names(nhanes_hyper) <- gsub("\\.\\.?\\.?","_",names(nhanes_hyper))
names(nhanes_hyper) <- gsub("_$","", names(nhanes_hyper))
names(nhanes_hyper)[89] <- "Total_plain_water_drank_yesterday"
names(nhanes_hyper)[57] <- paste0("alpha_",names(nhanes_hyper)[57])
names(nhanes_hyper)[58] <- paste0("beta_",names(nhanes_hyper)[58])
names(nhanes_hyper)[58] <- sub("_1$","",names(nhanes_hyper)[58])
# pour les codes qui ont et des soucis de transcodification, transco manuel
levels(nhanes_hyper$Ever_told_you_have_Hepatitis_B) <- c("Yes","No","Refused","Don't know")
levels(nhanes_hyper$Ever_told_you_have_Hepatitis_C) <- c("Yes","No","Don't know")
levels(nhanes_hyper$Received_Hepatitis_A_vaccine) <- c("At least 2 doses","Less than 2 doses",
"No doses","Refused", "Don't know")
levels(nhanes_hyper$Received_Hepatitis_B_3_dose_series) <- c("At least 2 doses","Less than 2 doses",
"No doses","Refused", "Don't know")
levels(nhanes_hyper$Ever_been_told_you_have_asthma) <- c("Yes", "No", "Don't know")
levels(nhanes_hyper$X_of_people_who_live_here_smoke_tobacco) <- c("No one in houseold is a smoker",
"1 household member is a smoker",
"2 household members are smokers",
"3 or more household members are smokers",
"Refused",NA)
levels(nhanes_hyper$Doctor_ever_said_you_were_overweight) <- c("Yes","No","Don't know")
levels(nhanes_hyper$Home_owned_bought_rented_other)[2] <- NA
levels(nhanes_hyper$Overall_recommendation_for_care)[2] <- NA
levels(nhanes_hyper$Overall_recommendation_for_care)[3] <- NA
levels(nhanes_hyper$VAR_TRAVAIL) <- c("No","Yes")
#Alleger un peu la description
levels(nhanes_hyper$Total_number_of_people_in_the_Household)[7] <- "7 or more"
levels(nhanes_hyper$Total_number_of_people_in_the_Family)[7] <- "7 or more"
#Qlqs nettoyage des variables non utile
nhanes_hyper$fed_infant_either_day <- NULL
nhanes_hyper$Number_of_days_of_intake <- NULL
nhanes_hyper$SEQN <- NULL
for (i in 1:ncol(nhanes_hyper)){
if (class(nhanes_hyper[,i])=="factor"){
for (j in 1:length(levels(nhanes_hyper[,i]))){
if (levels(nhanes_hyper[,i])[j]=="Don't know"){
levels(nhanes_hyper[,i])[j]=NA
break
}
}
}
}
for (i in 1:ncol(nhanes_hyper)){
if (class(nhanes_hyper[,i])=="factor"){
for (j in 1:length(levels(nhanes_hyper[,i]))){
if (levels(nhanes_hyper[,i])[j]=="Refused"){
levels(nhanes_hyper[,i])[j]=NA
break
}
}
}
}
# Etude du jeu de donnée nhanes_hyper
don <- nhanes_hyper
install.packages("data.table")
install.packages("VIM")
install.packages("mice")
rm(list=ls())
library(mice)
library(VIM)
library(data.table)
# Chargement du fichier transcodifié, enlevement de la 1ere colonne X et renommer la variable de sortie en Y
nhanes_hyper <- read.csv("data/nhanes_hyper_transcodifie.csv")
nhanes_hyper$X <- NULL
names(nhanes_hyper)[ncol(nhanes_hyper)] <- "Y"
nhanes_hyper$Y <- as.factor(nhanes_hyper$Y)
levels(nhanes_hyper$Y) <- c("Yes","No",NA)
# on remet les noms des champs propre
names(nhanes_hyper) <- gsub("\\.\\.?\\.?","_",names(nhanes_hyper))
names(nhanes_hyper) <- gsub("_$","", names(nhanes_hyper))
names(nhanes_hyper)[89] <- "Total_plain_water_drank_yesterday"
names(nhanes_hyper)[57] <- paste0("alpha_",names(nhanes_hyper)[57])
names(nhanes_hyper)[58] <- paste0("beta_",names(nhanes_hyper)[58])
names(nhanes_hyper)[58] <- sub("_1$","",names(nhanes_hyper)[58])
# pour les codes qui ont et des soucis de transcodification, transco manuel
levels(nhanes_hyper$Ever_told_you_have_Hepatitis_B) <- c("Yes","No","Refused","Don't know")
levels(nhanes_hyper$Ever_told_you_have_Hepatitis_C) <- c("Yes","No","Don't know")
levels(nhanes_hyper$Received_Hepatitis_A_vaccine) <- c("At least 2 doses","Less than 2 doses",
"No doses","Refused", "Don't know")
levels(nhanes_hyper$Received_Hepatitis_B_3_dose_series) <- c("At least 2 doses","Less than 2 doses",
"No doses","Refused", "Don't know")
levels(nhanes_hyper$Ever_been_told_you_have_asthma) <- c("Yes", "No", "Don't know")
levels(nhanes_hyper$X_of_people_who_live_here_smoke_tobacco) <- c("No one in houseold is a smoker",
"1 household member is a smoker",
"2 household members are smokers",
"3 or more household members are smokers",
"Refused",NA)
levels(nhanes_hyper$Doctor_ever_said_you_were_overweight) <- c("Yes","No","Don't know")
levels(nhanes_hyper$Home_owned_bought_rented_other)[2] <- NA
levels(nhanes_hyper$Overall_recommendation_for_care)[2] <- NA
levels(nhanes_hyper$Overall_recommendation_for_care)[3] <- NA
levels(nhanes_hyper$VAR_TRAVAIL) <- c("No","Yes")
#Alleger un peu la description
levels(nhanes_hyper$Total_number_of_people_in_the_Household)[7] <- "7 or more"
levels(nhanes_hyper$Total_number_of_people_in_the_Family)[7] <- "7 or more"
#Qlqs nettoyage des variables non utile
nhanes_hyper$fed_infant_either_day <- NULL
nhanes_hyper$Number_of_days_of_intake <- NULL
nhanes_hyper$SEQN <- NULL
for (i in 1:ncol(nhanes_hyper)){
if (class(nhanes_hyper[,i])=="factor"){
for (j in 1:length(levels(nhanes_hyper[,i]))){
if (levels(nhanes_hyper[,i])[j]=="Don't know"){
levels(nhanes_hyper[,i])[j]=NA
break
}
}
}
}
for (i in 1:ncol(nhanes_hyper)){
if (class(nhanes_hyper[,i])=="factor"){
for (j in 1:length(levels(nhanes_hyper[,i]))){
if (levels(nhanes_hyper[,i])[j]=="Refused"){
levels(nhanes_hyper[,i])[j]=NA
break
}
}
}
}
# Etude du jeu de donnée nhanes_hyper
don <- nhanes_hyper
write.csv(don,"data/nhanes_hyper_sans_mice.csv")
don$Received_Hepatitis_A_vaccine <- NULL
don$Received_Hepatitis_B_3_dose_series <- NULL
write.csv(don,"data/nhanes_hyper_sans_mice.csv")
